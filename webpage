<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Futuristic Webphone</title>
    <script src="https://www.linphone.org/assets/liblinphone-sdk/linphone.js"></script>
    <style>
        :root {
            --primary-color: #0d1a26;
            --secondary-color: #1f3a52;
            --accent-color: #00aaff;
            --text-color: #e0f7ff;
            --glow-color: rgba(0, 170, 255, 0.7);
        }

        body {
            background-color: var(--primary-color);
            color: var(--text-color);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            overflow: hidden;
        }

        #widget-container {
            perspective: 1500px;
        }

        .flip-container {
            width: 380px;
            height: 650px;
            position: relative;
            cursor: pointer;
        }

        .flipper {
            width: 100%;
            height: 100%;
            transition: transform 0.8s;
            transform-style: preserve-3d;
        }

        .flip-container.flipped .flipper {
            transform: rotateY(180deg);
        }

        .front, .back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            background: linear-gradient(145deg, var(--secondary-color), var(--primary-color));
            border: 2px solid var(--accent-color);
            border-radius: 20px;
            box-shadow: 0 0 15px var(--glow-color), inset 0 0 10px rgba(0,0,0,0.5);
            padding: 20px;
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
        }

        .back {
            transform: rotateY(180deg);
        }

        .header {
            text-align: center;
            margin-bottom: 15px;
            border-bottom: 1px solid var(--accent-color);
            padding-bottom: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        .header h2 { margin: 0 10px; }

        #status-light {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            transition: all 0.5s;
        }
        .status-light.offline { background-color: #ff4d4d; box-shadow: 0 0 8px #ff4d4d; }
        .status-light.online { background-color: #4dff4d; box-shadow: 0 0 8px #4dff4d; }
        .status-light.connecting { background-color: #ffcc00; box-shadow: 0 0 8px #ffcc00; animation: pulse 1.5s infinite; }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.3; }
            100% { opacity: 1; }
        }

        #sip-address-input, #chat-input {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            background-color: rgba(0, 0, 0, 0.3);
            border: 1px solid var(--accent-color);
            border-radius: 5px;
            color: var(--text-color);
            box-sizing: border-box;
        }

        .keypad, #dtmf-keypad {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
        }

        .key, .controls button, .chat-input-area button, .file-attach-area button {
            padding: 15px;
            font-size: 1.2em;
            border: 1px solid var(--accent-color);
            background-color: transparent;
            color: var(--text-color);
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s, box-shadow 0.3s;
        }

        .key:hover, .controls button:hover, .chat-input-area button:hover, .file-attach-area button:hover {
            background-color: var(--accent-color);
            color: var(--primary-color);
            box-shadow: 0 0 10px var(--glow-color);
        }

        .controls { display: flex; gap: 10px; margin-top: 15px; }
        .controls button { flex-grow: 1; }
        .controls .call { border-color: #4dff4d; }
        .controls .call:hover { background-color: #4dff4d; }
        .controls .hangup { border-color: #ff4d4d; }
        .controls .hangup:hover { background-color: #ff4d4d; }

        #call-screen {
            background-color: rgba(0, 0, 0, 0.4);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 15px;
            text-align: center;
            display: none; /* Initially hidden */
        }
        #contact-display { font-size: 1.2em; word-break: break-all; }
        #timer { font-size: 2em; letter-spacing: 2px; margin-top: 10px; color: var(--accent-color); }

        /* Chat styles */
        #chat-box {
            flex-grow: 1;
            background-color: rgba(0, 0, 0, 0.3);
            border-radius: 5px;
            overflow-y: auto;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid var(--accent-color);
        }
        .chat-message {
            padding: 8px 12px;
            border-radius: 15px;
            margin-bottom: 8px;
            max-width: 80%;
            word-wrap: break-word;
            line-height: 1.4;
        }
        .chat-message.sent {
            background-color: var(--accent-color);
            color: var(--primary-color);
            margin-left: auto;
            border-bottom-right-radius: 3px;
        }
        .chat-message.received {
            background-color: #2a5271;
            color: var(--text-color);
            margin-right: auto;
            border-bottom-left-radius: 3px;
        }
        .chat-message.system {
            background-color: transparent;
            color: var(--accent-color);
            font-style: italic;
            text-align: center;
            font-size: 0.8em;
            max-width: 100%;
        }
        .chat-input-area, .file-attach-area { display: flex; gap: 10px; margin-top: 5px; flex-shrink: 0;}
        .chat-input-area input { flex-grow: 1; }
        #file-name {
            flex-grow: 1;
            align-self: center;
            font-style: italic;
            opacity: 0.7;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
    </style>
</head>
<body>
    <div id="widget-container">
        <div id="widget" class="flip-container">
            <div class="flipper">
                <div class="front" id="phone-face">
                    <div class="header">
                        <h2>WebRTC Phone</h2>
                        <div id="status-light" class="offline"></div>
                        <span id="status-text">Inactive</span>
                    </div>
                    <div class="screen" id="call-screen">
                        <div id="contact-display">sip:address@domain.tld</div>
                        <div id="timer">00:00</div>
                    </div>
                    <input type="text" id="sip-address-input" placeholder="Enter SIP Address (e.g., user@sip.linphone.org)">
                    <div class="keypad">
                        <button class="key" onclick="appendToInput('1')">1</button>
                        <button class="key" onclick="appendToInput('2')">2</button>
                        <button class="key" onclick="appendToInput('3')">3</button>
                        <button class="key" onclick="appendToInput('4')">4</button>
                        <button class="key" onclick="appendToInput('5')">5</button>
                        <button class="key" onclick="appendToInput('6')">6</button>
                        <button class="key" onclick="appendToInput('7')">7</button>
                        <button class="key" onclick="appendToInput('8')">8</button>
                        <button class="key" onclick="appendToInput('9')">9</button>
                        <button class="key" onclick="appendToInput('*')">*</button>
                        <button class="key" onclick="appendToInput('0')">0</button>
                        <button class="key" onclick="appendToInput('#')">#</button>
                    </div>
                    <div class="controls">
                        <button id="call-btn" class="call">üìû Call</button>
                        <button id="hangup-btn" class="hangup" style="display: none;">‚òéÔ∏è Hang Up</button>
                    </div>
                    <div id="dtmf-keypad" style="display: none;"></div>
                </div>

                <div class="back" id="chat-face">
                    <div class="header">
                        <h2>Telegram Chat</h2>
                    </div>
                    <div id="chat-box">
                        </div>
                    <div class="chat-input-area">
                        <input type="text" id="chat-input" placeholder="Type a message...">
                        <button id="send-chat-btn">Send</button>
                    </div>
                     <div class="file-attach-area">
                        <input type="file" id="file-input" style="display: none;">
                        <button id="attach-file-btn">üìé Attach File</button>
                        <span id="file-name"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- CONFIGURATION ---
            // ‚ö†Ô∏è PASTE YOUR SECRET CREDENTIALS IN THIS SECTION
            const TELEGRAM_CONFIG = {
                botToken: '7753553773:AAHcoQspLrdCjrV84GjUlCM4olB_RaIkJpg', // üëà PASTE YOUR NEW, SECRET TOKEN HERE
                chatId: '1038828738'           // üëà PASTE YOUR CHAT ID HERE
            };

            const SIP_CONFIG = {
                username: 'daisreaux', // üëà PASTE YOUR LINPHONE USERNAME
                password: 'rytgah-tyVcyw-hutxy6', // üëà PASTE YOUR LINPHONE PASSWORD
                domain: 'sip.linphone.org',
                server: 'sip.linphone.org'
            };

            // --- DOM ELEMENT REFERENCES ---
            const widget = document.getElementById('widget');
            const sipAddressInput = document.getElementById('sip-address-input');
            const callBtn = document.getElementById('call-btn');
            const hangupBtn = document.getElementById('hangup-btn');
            const keypad = document.querySelector('.keypad');
            const dtmfKeypad = document.getElementById('dtmf-keypad');
            const statusLight = document.getElementById('status-light');
            const statusText = document.getElementById('status-text');
            const callScreen = document.getElementById('call-screen');
            const contactDisplay = document.getElementById('contact-display');
            const timerDisplay = document.getElementById('timer');
            const chatBox = document.getElementById('chat-box');
            const chatInput = document.getElementById('chat-input');
            const sendChatBtn = document.getElementById('send-chat-btn');
            const attachFileBtn = document.getElementById('attach-file-btn');
            const fileInput = document.getElementById('file-input');
            const fileNameDisplay = document.getElementById('file-name');

            // --- STATE MANAGEMENT ---
            let linphoneCore = null;
            let currentCall = null;
            let callTimerInterval = null;
            let lastTelegramUpdateId = 0;

            // --- UI LOGIC ---
            widget.addEventListener('click', (e) => {
                if (e.target.id === 'phone-face' || e.target.id === 'chat-face' || e.target.classList.contains('header')) {
                    widget.classList.toggle('flipped');
                }
            });

            function updateCallUI(inCall) {
                if (inCall) {
                    callScreen.style.display = 'block';
                    dtmfKeypad.innerHTML = keypad.innerHTML;
                    dtmfKeypad.style.display = 'grid';
                    keypad.style.display = 'none';
                    callBtn.style.display = 'none';
                    hangupBtn.style.display = 'inline-block';
                    sipAddressInput.style.display = 'none';
                } else {
                    callScreen.style.display = 'none';
                    dtmfKeypad.style.display = 'none';
                    keypad.style.display = 'grid';
                    callBtn.style.display = 'inline-block';
                    hangupBtn.style.display = 'none';
                    sipAddressInput.style.display = 'block';
                    clearInterval(callTimerInterval);
                    timerDisplay.textContent = '00:00';
                    contactDisplay.textContent = '';
                }
            }

            function startTimer() {
                let seconds = 0;
                timerDisplay.textContent = '00:00';
                callTimerInterval = setInterval(() => {
                    seconds++;
                    const mins = String(Math.floor(seconds / 60)).padStart(2, '0');
                    const secs = String(seconds % 60).padStart(2, '0');
                    timerDisplay.textContent = `${mins}:${secs}`;
                }, 1000);
            }
            
            window.appendToInput = (char) => {
                if (currentCall && currentCall.state === 'StreamsRunning') {
                    console.log(`Sending DTMF: ${char}`);
                    try { currentCall.sendDtmf(char); } catch(e) { console.error("DTMF send failed", e); }
                } else {
                    sipAddressInput.value += char;
                }
            };

            // --- TELEGRAM API INTEGRATION ---
            const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_CONFIG.botToken}`;

            function addMessageToChat(text, type) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('chat-message', type);
                messageElement.textContent = text;
                chatBox.appendChild(messageElement);
                chatBox.scrollTop = chatBox.scrollHeight;
            }

            async function sendTelegramMessage(isNotification = false) {
                const text = chatInput.value;
                if (!text && !isNotification) return;

                if (!isNotification) {
                    addMessageToChat(text, 'sent');
                    chatInput.value = '';
                }

                try {
                    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ chat_id: TELEGRAM_CONFIG.chatId, text: text }),
                    });
                    if (!response.ok) {
                        console.error('Telegram API error:', await response.json());
                        if (!isNotification) addMessageToChat('Failed to send message.', 'system');
                    }
                } catch (error) {
                    console.error('Failed to send Telegram message:', error);
                    if (!isNotification) addMessageToChat('Failed to send message.', 'system');
                }
            }

            async function sendTelegramFile() {
                const file = fileInput.files[0];
                if (!file) return;

                addMessageToChat(`Sending file: ${file.name}`, 'sent');
                fileNameDisplay.textContent = '';
                fileInput.value = '';

                const formData = new FormData();
                formData.append('chat_id', TELEGRAM_CONFIG.chatId);
                formData.append('document', file);
                
                try {
                    await fetch(`${TELEGRAM_API_URL}/sendDocument`, { method: 'POST', body: formData });
                } catch(error) {
                    console.error('Failed to send Telegram file:', error);
                    addMessageToChat('Failed to send file.', 'system');
                }
            }

            // This function continuously polls for messages from Telegram
            async function pollTelegramUpdates() {
                try {
                    const response = await fetch(`${TELEGRAM_API_URL}/getUpdates?offset=${lastTelegramUpdateId + 1}&timeout=30`);
                    if (!response.ok) {
                        throw new Error(`Telegram API responded with status ${response.status}`);
                    }
                    const data = await response.json();

                    if (data.ok && data.result.length > 0) {
                        for (const update of data.result) {
                            // Check if the message is from the correct chat and has content
                            if (update.message && update.message.chat.id.toString() === TELEGRAM_CONFIG.chatId) {
                               let messageText = '';
                                if (update.message.text) {
                                    messageText = update.message.text;
                                } else if (update.message.document) {
                                    messageText = `Received file: ${update.message.document.file_name}`;
                                } else if (update.message.photo) {
                                     messageText = 'Received a photo.';
                                } else {
                                     messageText = '[Received unsupported message type]';
                                }
                               addMessageToChat(messageText, 'received');
                            }
                            lastTelegramUpdateId = update.update_id;
                        }
                    }
                } catch (error) {
                    console.error('Error polling Telegram:', error);
                } finally {
                    // This ensures polling continues even after an error
                    setTimeout(pollTelegramUpdates, 2000);
                }
            }
            
            sendChatBtn.addEventListener('click', () => sendTelegramMessage(false));
            chatInput.addEventListener('keyup', (e) => {
                if (e.key === 'Enter') sendTelegramMessage(false);
            });
            attachFileBtn.addEventListener('click', () => fileInput.click());
            fileInput.addEventListener('change', sendTelegramFile);

            // --- LINPHONE WEBRTC INTEGRATION ---
            async function initializeLinphone() {
                const lc = new linphone.Core({});
                linphoneCore = lc;
                
                lc.on('registrationStateChanged', (identity, state) => {
                    console.log(`Registration state: ${state}`);
                    statusLight.classList.remove('offline', 'connecting', 'online');
                    switch (state) {
                        case 'None': case 'Cleared': case 'Failed':
                            statusText.textContent = 'Offline';
                            statusLight.classList.add('offline');
                            break;
                        case 'Progress':
                            statusText.textContent = 'Connecting...';
                            statusLight.classList.add('connecting');
                            break;
                        case 'Ok':
                            statusText.textContent = 'Online';
                            statusLight.classList.add('online');
                            // Use the same function to send notifications
                            chatInput.value = 'üöÄ Webphone is online and ready for calls!';
                            sendTelegramMessage(true);
                            break;
                    }
                });
                
                lc.on('callStateChanged', (call, state, message) => {
                    console.log(`Call state: ${state}`, message);
                    currentCall = call;
                    switch (state) {
                        case 'IncomingReceived':
                            lc.acceptCall(call);
                            contactDisplay.textContent = call.remoteAddress.asStringUriOnly();
                            updateCallUI(true);
                            break;
                        case 'StreamsRunning':
                            startTimer();
                            break;
                        case 'End': case 'Error':
                            currentCall = null;
                            updateCallUI(false);
                            break;
                    }
                });

                lc.start();
                const identity = lc.newAddress(`sip:${SIP_CONFIG.username}@${SIP_CONFIG.domain}`);
                const authInfo = lc.newAuthInfo(SIP_CONFIG.username, null, SIP_CONFIG.password, null, null, SIP_CONFIG.domain);
                lc.addAuthInfo(authInfo);
                const proxyCfg = lc.newProxyConfig();
                proxyCfg.identityAddress = identity;
                proxyCfg.serverAddress = `sip:${SIP_CONFIG.server};transport=wss`;
                lc.addProxyConfig(proxyCfg);
                lc.defaultProxyConfig = proxyCfg;
            }
            
            callBtn.addEventListener('click', () => {
                const destination = sipAddressInput.value;
                if (!destination || !linphoneCore) {
                    alert('Please enter a valid SIP address and ensure the webphone is active.');
                    return;
                }
                try {
                    const call = linphoneCore.invite(destination);
                    contactDisplay.textContent = destination;
                    updateCallUI(true);
                } catch(e) {
                    console.error("Call failed:", e);
                    alert("Could not start call. See console for details.");
                }
            });

            hangupBtn.addEventListener('click', () => {
                if (currentCall && linphoneCore) {
                    linphoneCore.terminateCall(currentCall);
                }
            });

            // --- INITIALIZATION BUTTON ---
            const startButton = document.createElement('button');
            startButton.textContent = '‚ö° ACTIVATE WEBPHONE ‚ö°';
            startButton.classList.add('key');
            startButton.style.width = '100%';
            startButton.style.marginTop = '20px';
            document.querySelector('#phone-face .controls').insertAdjacentElement('afterend', startButton);

            startButton.addEventListener('click', async () => {
                try {
                    // First, request microphone access. This is the most common point of failure.
                    statusText.textContent = 'Requesting Mic...';
                    await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
                    
                    // If mic access is successful, proceed with initialization
                    statusText.textContent = 'Initializing...';
                    await initializeLinphone();
                    
                    // Start polling for Telegram messages for two-way chat
                    addMessageToChat('Listening for Telegram messages...', 'system');
                    pollTelegramUpdates();

                    startButton.style.display = 'none';
                } catch (error) {
                    console.error("Initialization failed:", error);
                    statusText.textContent = 'Mic Error!';
                    alert("Microphone Access Failed!\n\nPlease ensure you are on a secure (https://) site, you clicked 'Allow' for the microphone permission, and a microphone is connected.");
                }
            }, { once: true });
        });
    </script>
</body>
</html>
